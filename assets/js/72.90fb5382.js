(window.webpackJsonp=window.webpackJsonp||[]).push([[72],{427:function(t,a,e){"use strict";e.r(a);var r=e(45),s=Object(r.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"基本包装类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基本包装类型"}},[t._v("#")]),t._v(" 基本包装类型")]),t._v(" "),e("p",[t._v("为了便于操作基本类型的值，有三个特殊的引用类型：Boolean，Number，String。每当读取一个基本类型的值，就会创造一个对应的包装对象，从而能够提供一些方法来操作数据。比如对一个字符串使用subString方法，实际上是先创建了一个String类型的实例，然后在实例上调用方法，最后销毁这个实例。")]),t._v(" "),e("div",{staticClass:"custom-block warning"},[e("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),e("p",[t._v("只在绝对必要的情况下调用Boolean，Number和String来创建基本包装类型的对象")])]),t._v(" "),e("p",[t._v("上述做法容易混淆正在处理基本类型还是引用类型")]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),e("p",[t._v("对基本包装类型的实例调用typeof会返回object，所有基本包装类型的对象都会在布尔运算时被作为true")])]),t._v(" "),e("p",[t._v("另外需要注意，使用new调用基本包装类型的构造函数与调用同名的转型函数是不一样的，需要体会一下：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('let val = 1;\nlet number = Number(val);\nalert(typeof(number));// "number"\n\nlet obj = new Number(val);\nalert(typeof(obj)); // "object"\n')])])]),e("div",{staticClass:"custom-block warning"},[e("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),e("p",[t._v("在布尔表达式中使用Boolean对象会导致其始终被认为true！建议是永远不使用Boolean对象")])]),t._v(" "),e("h2",{attrs:{id:"number"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#number"}},[t._v("#")]),t._v(" Number")]),t._v(" "),e("p",[t._v("之前也有记录过，toString可以指定基数，另外还有toFixed方法，保留指定的小数位数（自动舍入）；toExponential方法，转换为科学记数法；toPrecision方法，接收指定的输出位数，使用合适的方法进行格式化。")]),t._v(" "),e("h2",{attrs:{id:"string"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#string"}},[t._v("#")]),t._v(" String")]),t._v(" "),e("p",[t._v("提供了很多方法：")]),t._v(" "),e("h3",{attrs:{id:"charat-和charcodeat"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#charat-和charcodeat"}},[t._v("#")]),t._v(" charAt()和charCodeAt()")]),t._v(" "),e("p",[t._v("接收从0开始的一个字符位置作为参数返回给定位子的那个字符或者字符的编码")]),t._v(" "),e("h3",{attrs:{id:"concat"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#concat"}},[t._v("#")]),t._v(" concat()")]),t._v(" "),e("p",[t._v("与数组concat类似，拼接一个或多个字符串。当然，字符串通常会使用+进行拼接")]),t._v(" "),e("h3",{attrs:{id:"子串方法slice-substr-substring"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#子串方法slice-substr-substring"}},[t._v("#")]),t._v(" 子串方法slice(),substr(),substring()")]),t._v(" "),e("p",[t._v("均接收两个参数，slice和substring的第一个参数是起始位置，第二个参数是结束位置之后一个字符的位置。而substr的第二个参数是返回字符个数。三个方法的第二个参数缺省值是字符串的长度。对于负数参数它们的行为有所区别")]),t._v(" "),e("h3",{attrs:{id:"indexof和lastindexof"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#indexof和lastindexof"}},[t._v("#")]),t._v(" indexOf和lastIndexOf")]),t._v(" "),e("p",[t._v("从前或从后开始查找子字符串的起始位置，可以在第二个参数指定搜索起点")]),t._v(" "),e("h3",{attrs:{id:"trim"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#trim"}},[t._v("#")]),t._v(" trim")]),t._v(" "),e("p",[t._v("返回删除了前后空格的副本")]),t._v(" "),e("h3",{attrs:{id:"大小写转换"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#大小写转换"}},[t._v("#")]),t._v(" 大小写转换")]),t._v(" "),e("p",[t._v("toUpperCase和toLowerCase以及按照本地区域规则转换的toLocaleUpper/LowerCase（只在少数地区会得到不同的结果）")]),t._v(" "),e("h3",{attrs:{id:"模式匹配"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#模式匹配"}},[t._v("#")]),t._v(" 模式匹配")]),t._v(" "),e("h4",{attrs:{id:"match-和search"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#match-和search"}},[t._v("#")]),t._v(" match()和search()")]),t._v(" "),e("p",[t._v("在字符串上调用此方法，本质与调用RegExp的exec方法相同。match接受一个参数，要么是一个正则表达式，要么是一个RegExp对象。返回值也与exec相同，数组第一项是完整匹配的字符串，之后的每项是每个捕获组的匹配。"),e("br"),t._v("\n另一个方法是search()，参数与match相同，返回第一个匹配项的索引")]),t._v(" "),e("h4",{attrs:{id:"replace"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#replace"}},[t._v("#")]),t._v(" replace()")]),t._v(" "),e("p",[t._v("两个参数，第一个是字符串或正则表达式，用于匹配，第二个是字符串或函数，作为替换内容。如果需要全局替换，参数1必须使用g标志的正则，使用字符串只会替换第一个匹配。参数2的函数可以更精细地替换，建议直接参考书上例子")]),t._v(" "),e("h3",{attrs:{id:"localecompare"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#localecompare"}},[t._v("#")]),t._v(" localeCompare")]),t._v(" "),e("p",[t._v("按照字母表排序比较两字符串，如果参数排在后面，返回负数，排在前面则返回正数，相等时返回0")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('let string = "yellow";\nalert(string.localeCompare("blue")); //1\nalert(string.localeCompare("zoom")); //-1\n')])])]),e("h3",{attrs:{id:"fromcharcode"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#fromcharcode"}},[t._v("#")]),t._v(" fromCharCode")]),t._v(" "),e("p",[t._v("将传入的多个字符编码转换为字符串")])])}),[],!1,null,null,null);a.default=s.exports}}]);