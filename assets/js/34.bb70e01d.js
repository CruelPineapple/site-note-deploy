(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{390:function(t,a,r){"use strict";r.r(a);var s=r(45),e=Object(s.a)({},(function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"array类型"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#array类型"}},[t._v("#")]),t._v(" Array类型")]),t._v(" "),r("p",[t._v("Array.isArray(val) 是通用的测试数组方法")]),t._v(" "),r("h2",{attrs:{id:"tostring"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#tostring"}},[t._v("#")]),t._v(" toString()")]),t._v(" "),r("p",[t._v("数组的toString和toLocaleString类似，调用数组每项对toString/toLocaleString方法，返回它们用逗号分割的字符串")]),t._v(" "),r("h2",{attrs:{id:"join"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#join"}},[t._v("#")]),t._v(" join()")]),t._v(" "),r("p",[t._v("join方法接收一个参数，返回用参数字符作为分割符的字符串")]),t._v(" "),r("h2",{attrs:{id:"栈方法-push和pop"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#栈方法-push和pop"}},[t._v("#")]),t._v(" 栈方法：push和pop")]),t._v(" "),r("p",[t._v("让数组能向栈一样工作，push将参数添加至数组末尾，pop移除末尾项并将其返回")]),t._v(" "),r("h2",{attrs:{id:"队列方法-push和shift"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#队列方法-push和shift"}},[t._v("#")]),t._v(" 队列方法：push和shift")]),t._v(" "),r("p",[t._v("让数组向队列一样工作，shift移除首项并将其返回。另外，还提供unshift方法，将参数项加入数组首部")]),t._v(" "),r("h2",{attrs:{id:"重排序-reverse和sort"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#重排序-reverse和sort"}},[t._v("#")]),t._v(" 重排序：reverse和sort")]),t._v(" "),r("p",[t._v("reverse方法反转数组顺序，sort方法默认比较每项toString所得的"),r("strong",[t._v("字符串")]),t._v("，默认按照升序排列，会出现例如“10”排在“5”前面的问题")]),t._v(" "),r("h4",{attrs:{id:"自定义sort"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#自定义sort"}},[t._v("#")]),t._v(" 自定义sort")]),t._v(" "),r("p",[t._v("向sort传入一个比较函数，会按照该函数的返回值确定是否交换两项的位置：返回值为正数，则交换")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("let arr = [1, 5, 2, 3, 4];\n\nfunction compare(a, b){\n    return a - b;\n}\n\n\narr.sort(compare);\narr.sort((a, b) => a - b); //效果相同\n")])])]),r("h2",{attrs:{id:"concat"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#concat"}},[t._v("#")]),t._v(" concat()")]),t._v(" "),r("p",[t._v("创建当前数组的一个副本，再将参数添加到副本的末尾，"),r("strong",[t._v("不传参数会直接返回一个副本")])]),t._v(" "),r("h2",{attrs:{id:"slice"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#slice"}},[t._v("#")]),t._v(" slice()")]),t._v(" "),r("p",[t._v("基于当前数组返回一个切片后的副本，参数给出起始位置和结束位置（结束项不会被包括）")]),t._v(" "),r("h2",{attrs:{id:"splice"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#splice"}},[t._v("#")]),t._v(" splice()")]),t._v(" "),r("p",[t._v("splice的返回值：被从原数组中移除的部分")]),t._v(" "),r("ol",[r("li",[t._v("删除"),r("br"),t._v("\n指定两起始位置和要删除的项数")]),t._v(" "),r("li",[t._v("插入"),r("br"),t._v("\n指定起始插入位置，要删除的项数（这里是0）和要插入的项")]),t._v(" "),r("li",[t._v("替换"),r("br"),t._v("\n指定起始插入位置，要删除的项数和要插入的项")])]),t._v(" "),r("p",[t._v("可以注意到，插入和替换是相同的工作方式")]),t._v(" "),r("h2",{attrs:{id:"位置方法-indexof"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#位置方法-indexof"}},[t._v("#")]),t._v(" 位置方法：indexOf")]),t._v(" "),r("p",[t._v("indexOf和lastIndexOf分别返回指定项在数组中第一次和最后一次出现的位置，查找使用===，未找到返回-1")]),t._v(" "),r("h2",{attrs:{id:"迭代方法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#迭代方法"}},[t._v("#")]),t._v(" 迭代方法")]),t._v(" "),r("p",[t._v("迭代方法均接受两个参数，要在每一项上运行的函数和（可选的）运行该函数的作用域，函数接收三个参数，数组项的值，该项在数组中的位置和数组对象本身。下面所有迭代方法都不改变原数组")]),t._v(" "),r("h4",{attrs:{id:"every"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#every"}},[t._v("#")]),t._v(" every")]),t._v(" "),r("p",[t._v("对每一项运行给定函数，返回值均为真则返回true")]),t._v(" "),r("h4",{attrs:{id:"filter"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#filter"}},[t._v("#")]),t._v(" filter")]),t._v(" "),r("p",[t._v("对每一项运行给定函数，返回一个数组，包含所有给定函数返回true的项")]),t._v(" "),r("h4",{attrs:{id:"foreach"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#foreach"}},[t._v("#")]),t._v(" forEach")]),t._v(" "),r("p",[t._v("对每一项运行给定函数，然后什么都不做")]),t._v(" "),r("h4",{attrs:{id:"map"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#map"}},[t._v("#")]),t._v(" map")]),t._v(" "),r("p",[t._v("对每一项运行给定函数，返回一个数组，包含所有给定函数的返回值")]),t._v(" "),r("h4",{attrs:{id:"some"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#some"}},[t._v("#")]),t._v(" some")]),t._v(" "),r("p",[t._v("对每一项运行给定函数，只要某一项的运行结果返回真就返回true")]),t._v(" "),r("p",[t._v("every和some都是判断数组成分的filter可以过滤数组内容，forEach用于不需要返回值的情况，map将数组映射为另一个数组。随便来个例子：")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("let num = [1, 2, 3, 4, 5, 4, 3, 2, 1];\nlet res = num.filter((item, index, array) => return (item > 2));\n// res = [3, 4, 5, 4, 3]\n")])])]),r("h2",{attrs:{id:"缩小方法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#缩小方法"}},[t._v("#")]),t._v(" 缩小方法")]),t._v(" "),r("p",[t._v("虽然不懂为什么叫缩小方法，它会迭代所有项，且过程中函数能使用之前迭代的结果。缩小方法接收一个对每个项运行的回调函数和（可选的）作为缩小基础的初始值（第一次运行回调函数时，其第一个参数的值，缺省会使用数组的第一项）。回调函数拥有四个参数，上次迭代的返回值，当前项，当前索引和数组对象"),r("br"),t._v("\nreduce从第一项开始，reduceRight从最后一项开始。一个例子：")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("let values = [1, 2, 3, 4, 5];\nlet sum = values.reduce((prev, cur, index, array) => prev + cur);\n//sum = 15\n")])])]),r("p",[t._v("这四个参数中，后两个是可以不用的。")]),t._v(" "),r("p",[t._v("上面红宝书讲的有点抽象，看了mdn之后用人话讲一遍：")]),t._v(" "),r("p",[t._v("reduce接受一个reducer函数，这个函数就是上面提到的那个四个参数的，以及一个初始值，可选的，作为迭代的第一个值（缺省使用数组的第一个元素）")])])}),[],!1,null,null,null);a.default=e.exports}}]);