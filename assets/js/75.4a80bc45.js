(window.webpackJsonp=window.webpackJsonp||[]).push([[75],{430:function(a,t,s){"use strict";s.r(t);var l=s(45),r=Object(l.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"单体内置对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#单体内置对象"}},[a._v("#")]),a._v(" 单体内置对象")]),a._v(" "),s("p",[a._v("内置对象：由ES提供的，不依赖宿主环境的对象，在程序开始执行之前就存在了")]),a._v(" "),s("h2",{attrs:{id:"global"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#global"}},[a._v("#")]),a._v(" Global")]),a._v(" "),s("p",[a._v("“不管从什么角度上看，Global对象都是不存在的，ES中的Global在某种意义上是一个终极兜底对象”"),s("br"),a._v("\n不属于任何其他对象的属性和方法，最终都会是global对象的属性和方法。所谓的全局变量和全局函数，都是属于global对象的，例如isNaN(), isFinite(), parseInt()等")]),a._v(" "),s("h3",{attrs:{id:"uri编码方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#uri编码方法"}},[a._v("#")]),a._v(" URI编码方法")]),a._v(" "),s("p",[a._v("encodeURI和encodeURIComponent，前者不会对本身属于URI的特殊字符进行编码，如冒号，斜杠，问号等，后者会对任何非标准字符进行编码")]),a._v(" "),s("h3",{attrs:{id:"eval"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#eval"}},[a._v("#")]),a._v(" eval")]),a._v(" "),s("p",[a._v("相当于一个ES解析器。通过eval执行的代码具有与调用eval处相同的执行环境和作用域链。在eval参数中创建的变量和函数定义都不会被提升，因为在解析时它们只是作为字符串的一部分，只在执行eval的时候才会被创建。")]),a._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[a._v("WARNING")]),a._v(" "),s("p",[a._v("使用eval时，需要十分小心代码注入")])]),a._v(" "),s("h3",{attrs:{id:"global的属性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#global的属性"}},[a._v("#")]),a._v(" Global的属性")]),a._v(" "),s("p",[a._v("undefined，NaN，Infinity这些特殊值，引用类型的构造函数都是global的属性")]),a._v(" "),s("h3",{attrs:{id:"window"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#window"}},[a._v("#")]),a._v(" window")]),a._v(" "),s("p",[a._v("ES没有指出如何直接访问Global，但是Web浏览器将它作为window对象的一部分来实现，因此可以通过window来访问Global。window对象除了扮演ES规定的global之外，还承担了其他任务。"),s("br"),a._v("\n另一种获得Global的方式如下：")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("var global = function(){\n    return this;\n}();\n")])])]),s("p",[a._v("上述代码创建了一个立即调用的函数表达式，返回了this。在没有给函数明确指定this值的情况下，this值等于Global对象。简单地返回this来取得Global对象，在任何执行环境下都是可行的。")]),a._v(" "),s("h2",{attrs:{id:"math"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#math"}},[a._v("#")]),a._v(" Math")]),a._v(" "),s("p",[a._v("包含一些记录了数学中常用值的属性，如自然对数是Math.E。需要使用时查询即可")]),a._v(" "),s("h3",{attrs:{id:"min和max"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#min和max"}},[a._v("#")]),a._v(" min和max")]),a._v(" "),s("p",[a._v("用于寻找参数列表中最小或最大的数字，配合apply使用便可寻找数组中的最值：")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("let values = [1, 2, 3, 4, 5];\nlet max = Math.max.apply(Math, values);\n")])])]),s("h3",{attrs:{id:"舍入方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#舍入方法"}},[a._v("#")]),a._v(" 舍入方法")]),a._v(" "),s("p",[a._v("ceil：向上舍入"),s("br"),a._v("\nfloor：向下舍入\nround：四舍五入")]),a._v(" "),s("h3",{attrs:{id:"random"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#random"}},[a._v("#")]),a._v(" random")]),a._v(" "),s("p",[a._v("返回(0,1)范围内的一个数，为了得到一个(1,10)之间的数：")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("let random = Math.floor(Math.random()*10+1);\n\n//一个更灵活的用法：\nfunction selectFrom(lowerVal, upperVal){\n    choices = upperVal - lowerVal + 1;\n    return Math.floor(Math.random()*choices + lowerVal);\n}\n")])])]),s("p",[a._v("第二个用法可以指定范围获得随机数")]),a._v(" "),s("h3",{attrs:{id:"其他方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#其他方法"}},[a._v("#")]),a._v(" 其他方法")]),a._v(" "),s("p",[a._v("绝对值，正弦函数等，需要时查询")])])}),[],!1,null,null,null);t.default=r.exports}}]);