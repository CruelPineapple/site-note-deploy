(window.webpackJsonp=window.webpackJsonp||[]).push([[73],{427:function(t,a,s){"use strict";s.r(a);var e=s(45),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"apply和函数参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#apply和函数参数"}},[t._v("#")]),t._v(" apply和函数参数")]),t._v(" "),s("h2",{attrs:{id:"function-prototype-apply"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#function-prototype-apply"}},[t._v("#")]),t._v(" Function.prototype.apply()")]),t._v(" "),s("p",[t._v("apply方法接收两个参数，第一个用于指定为function的this值，第二个是参数数组，数组的元素会挨个作为函数的参数传入：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("let a = [1, 2, 3];\na.push.apply(a,[4,5,6]);\n")])])]),s("h2",{attrs:{id:"函数的arguments属性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#函数的arguments属性"}},[t._v("#")]),t._v(" 函数的arguments属性")]),t._v(" "),s("p",[t._v("函数不介意参数的数目，不论声明的时候的参数个数如何，所有参数会以数组的形式交给函数（因此js没有重载）"),s("br"),t._v("\narguments对象可以在函数内部如同数组一样访问，它的length属性表示参数个数。如果手动指定arguments中元素的值，传入的参数值就会被覆盖")])])}),[],!1,null,null,null);a.default=r.exports}}]);