(window.webpackJsonp=window.webpackJsonp||[]).push([[84],{436:function(t,a,s){"use strict";s.r(a);var e=s(45),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"小程序setdata"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#小程序setdata"}},[t._v("#")]),t._v(" 小程序setData()")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v("小程序不建议频繁使用setData")])]),t._v(" "),s("h4",{attrs:{id:"微信文档这样说"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#微信文档这样说"}},[t._v("#")]),t._v(" 微信文档这样说：")]),t._v(" "),s("blockquote",[s("p",[t._v("小程序的视图层目前使用 WebView 作为渲染载体，而逻辑层是由独立的 JavascriptCore 作为运行环境。在架构上，WebView 和 JavascriptCore 都是独立的模块，并不具备数据直接共享的通道。当前，视图层和逻辑层的数据传输，实际上通过两边提供的 evaluateJavascript 所实现。即用户传输的数据，需要将其转换为字符串形式传递，同时把转换后的数据内容拼接成一份 JS 脚本，再通过执行 JS 脚本的形式传递到两边独立环境。而 evaluateJavascript 的执行会受很多方面的影响，数据到达视图层并不是实时的。")])]),t._v(" "),s("p",[t._v("所以说，小程序的视图层和逻辑层是分开的，由不同的模块管理视图和逻辑，在这两个模块之间传输数据是需要通过一个管道来进行：先转换为字符串，再将其作为js脚本来编译运行。"),s("br"),t._v("\n频繁使用这个管道进行传输会导致高频率的转换/编译执行。"),s("br"),t._v("\n为什么需要setData这个方法，是为了让视图层可以使用逻辑层的数据，因此也就有了上述管道的参与，导致了一次js编译的发生。不使用setData的变量无法被视图层使用，相对的，也不存在编译开销。")]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("以上为个人理解，对准确性不做保证。")])])}),[],!1,null,null,null);a.default=r.exports}}]);