(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{389:function(n,e,t){"use strict";t.r(e);var a=t(45),r=Object(a.a)({},(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h1",{attrs:{id:"私有变量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#私有变量"}},[n._v("#")]),n._v(" 私有变量")]),n._v(" "),t("p",[n._v("严格来说，js没有私有成员概念，但是任何在函数中定义的变量都可以认为是私有变量，因为它们不能在函数外面访问。如果在函数内部创建一个闭包，那么闭包通过自己的作用域连也可以访问这些变量，利用这一点，就可以创建用于访问私有变量的公有方法。有权访问私有变量和私有函数的公有方法被称为特权方法，创建特权方法有两种方式，第一种是在构造函数中定义特权方法：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("function MyObject(){\n    //私有变量和私有函数\n    var privateVariable = 10;\n\n    function privateFunction(){\n        return false;\n    }\n\n    this.publicMethod = function(){\n        privateVariable++;\n        return privateFunction();\n    };\n}\n")])])]),t("p",[n._v("这个模式在构造函数内部定义了所有私有变量和函数，然后继续创建了能够访问这些私有成员的特权方法。特权方法作为闭包，有权访问在构造函数中定义的所有变量和函数。利用私有和特权成员，可以隐藏那些不应该被直接修改的数据：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("function Person(name){\n    this.getName = function(){\n        return name;\n    };\n\n    this.setName = function(value){\n        name = value;\n    };\n}\n")])])]),t("p",[n._v("这里Person中不需要显示指定一个变量来保存name值，因为getName方法作为闭包，始终能够拿到参数中的name值。\n在构造函数只能够定义特权方法也有一个缺点，就是必须使用构造函数模式来达到这个目的，之前有提到过，构造函数模式的缺点就是会为每个实例重复创建同样一组新方法。静态私有变量实现的特权方法就可以避免这个问题。")]),n._v(" "),t("h2",{attrs:{id:"静态私有变量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#静态私有变量"}},[n._v("#")]),n._v(" 静态私有变量")]),n._v(" "),t("p",[n._v("通过在私有作用域中定义私有变量或函数，同样可以创建特权方法：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("(function(){\n    //私有变量和私有函数\n    var privateVariable = 10;\n\n    function privateFunction(){\n        return false;\n    }\n\n    //构造函数\n    MyObject = function(){};\n\n    //特权方法\n    MyObject.prototype.publicMethos = function(){\n        privateVariable++;\n        return privateFunction();\n    }\n})();\n")])])]),t("p",[n._v("这个模式创建了一个私有作用域，并在其中封装了一个构造函数及相应的方法。在私有作用域中，首先定义了私有变量和私有函数，然后定义了构造函数及公有方法。公有方法定义在原型上，体现了典型的原型模式。需要注意，此模式使用了函数表达式而不是函数声明，因为函数声明只能创建局部函数，同时MyObject也没有使用var，为了把它搞成全局变量。这个模式的特权方法定义在原型上，因此所有实例使用同一个函数，而通过闭包，这个特权方法总是保存着对作用域的引用。")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('(function(){\n\n    var name = "";\n\n    Person = function(value){\n        name = value;\n    };\n\n    Person.prototype.getName = function(){\n        return name;\n    };\n\n    Person.protorype.setName = function(){\n        name = value;\n    };\n})();\n\nvar person1 = new Person("Nicholas");\nalert(person1.getName());  //Nicholas\nperson1.setName("Gerg");\nalert(person1.getName());  //Gerg\n\nvar person2 = new Person("Michael");\nalert(person2.getName());  //Michael\nalert(person1.getName());  //Michael\n')])])]),t("p",[n._v("这种模式下，name成为了一个静态的，由所有实例共享的属性。到底是使用实例变量还是静态私有变量，需要视情况决定。\n我来对此模式进行总结：首先创建一个匿名函数表达式形成一个局部作用域，在这里创建静态私有变量。然后生成一个构造函数，在其原型上定义公有方法，这里的构造函数通过闭包连接至局部作用域。此时，通过构造函数创建的实例均连接至局部作用域中的变量。")]),n._v(" "),t("h2",{attrs:{id:"模块模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#模块模式"}},[n._v("#")]),n._v(" 模块模式")]),n._v(" "),t("p",[n._v("上面的模式用于为自定义类型创建私有变量和特权方法。而模块模式则是为单例创建私有变量和特权方法：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("var singleton = function(){\n    //私有变量和私有函数\n    var privateVariable = 10;\n\n    function privateFunction(){\n        return false;\n    }\n\n    //公有方法和属性\n    return {\n        publicProperty: true,\n        publicMethod: function(){\n            privateVariable++;\n            return privateFunction();\n        }\n    };\n}();\n")])])]),t("p",[n._v("这个模式使用了一个返回对象的匿名函数，先在其中定义私有变量和函数，然后将一个对象字面量返回，这个对象只包含公共部分。这个模式在需要对单例进行初始化同时又需要维护其私有变量对时候会很有用。例如：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('var application = function(){\n    //私有\n    var components = new Array();\n\n    //初始化\n    components.push(new BaseComponent());\n\n    //公共\n    return {\n        getComponentCount: function(){\n            return components.length;\n        },\n        registerComponent: function(component){\n            if(typeof component == "object"){\n                components.push(component);\n            }\n        }\n    };\n}();\n')])])]),t("p",[n._v("红宝书总结道：如果必须创建一个对象并以某些数据对其进行初始化，同时还要公开一些能够访问这些私有数据的方法，那么就可以使用这种模式。")]),n._v(" "),t("h2",{attrs:{id:"增强模块模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#增强模块模式"}},[n._v("#")]),n._v(" 增强模块模式")]),n._v(" "),t("p",[n._v("如果这个单例必须是某种类型的实例，就是增强模块模式")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('var application = function(){\n    var components = new Array();\n    components.push(new BaseComponent());\n\n    var app = new BaseComponent();\n    app.getComponent = function(){\n        return components.length;\n    };\n    app.rigisterComponent = function(component){\n        if(typeof component == "object"){\n            components.push(component);\n        }\n    };\n    return app;\n}\n')])])])])}),[],!1,null,null,null);e.default=r.exports}}]);